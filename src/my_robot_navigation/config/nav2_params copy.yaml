amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan
    # 추가됨
    set_initial_pose: true
    initial_pose: [0, 0, 0]


bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: odom
    bt_loop_duration: 10
    default_server_timeout: 20
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_smooth_path_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_drive_on_heading_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_globally_updated_goal_condition_bt_node
    - nav2_is_path_valid_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_truncate_path_local_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_path_expiring_timer_condition
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_goal_updated_controller_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    - nav2_controller_cancel_bt_node
    - nav2_path_longer_on_approach_bt_node
    - nav2_wait_cancel_bt_node
    - nav2_spin_cancel_bt_node
    - nav2_back_up_cancel_bt_node
    - nav2_drive_on_heading_cancel_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: True

# controller_server:
#   ros__parameters:
#     use_sim_time: True
#     controller_frequency: 20.0
#     min_x_velocity_threshold: 0.001
#     goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
#     controller_plugins: ["FollowPath"]

#     # Progress checker parameters
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 10.0
#     # Goal checker parameters
#     #precise_goal_checker:
#     #  plugin: "nav2_controller::SimpleGoalChecker"
#     #  xy_goal_tolerance: 0.25
#     #  yaw_goal_tolerance: 0.25
#     #  stateful: True
#     general_goal_checker:
#       stateful: True
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.25
#       yaw_goal_tolerance: 0.1
#     # DWB parameters
#     FollowPath:
#       plugin: "dwb_core::DWBLocalPlanner"
#       debug_trajectory_details: True
#       min_vel_x: 0.0
#       min_vel_y: 0.0
#       max_vel_x: 0.4  # 속도 증가
#       max_vel_y: 0.0
#       max_vel_theta: 1.8  # 회전 속도 증가
#       min_speed_xy: 0.05  # 너무 낮으면 멈추므로 설정
#       max_speed_xy: 0.6  # 곡선에서 적절한 속도 유지
#       min_speed_theta: 0.05
#       acc_lim_x: 1.2  # 가속 증가
#       acc_lim_y: 0.0
#       acc_lim_theta: 2.5  # 회전 가속 증가
#       decel_lim_x: -0.8  # 감속 증가
#       decel_lim_y: 0.0
#       decel_lim_theta: -2.5
#       vx_samples: 25  # 샘플 수 증가로 더 부드러운 경로 탐색
#       vy_samples: 5
#       vtheta_samples: 25
#       sim_time: 1.2  # 시뮬레이션 시간 증가로 예측 향상
#       linear_granularity: 0.05
#       angular_granularity: 0.02
#       transform_tolerance: 0.2
#       xy_goal_tolerance: 0.2  # 목표 근처에서 더 유연하게 허용
#       trans_stopped_velocity: 0.2
#       short_circuit_trajectory_evaluation: True
#       stateful: True
#       critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
#       BaseObstacle.scale: 0.05  # 장애물 반응 증가
#       PathAlign.scale: 40.0  # 경로 정렬 중요도 증가
#       PathAlign.forward_point_distance: 0.2  # 더 먼 거리 고려
#       GoalAlign.scale: 28.0  # 목표 정렬 중요도 증가
#       GoalAlign.forward_point_distance: 0.15
#       PathDist.scale: 36.0
#       GoalDist.scale: 28.0
#       RotateToGoal.scale: 35.0
#       RotateToGoal.slowing_factor: 6.0  # 더 부드럽게 감속
#       RotateToGoal.lookahead_time: -1.0

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    # Goal checker parameters
    general_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.1
      stateful: True
    
#     FollowPath:
#       plugin: "vector_pursuit_controller::VectorPursuitController"
#       k: 5.0
#       desired_linear_vel: 0.6
#       min_turning_radius: 0.35
#       lookahead_dist: 2.0
#       min_lookahead_dist: 0.5
#       max_lookahead_dist: 2.0
#       lookahead_time: 0.5
#       rotate_to_heading_angular_vel: 0.3
#       transform_tolerance: 0.1
#       use_velocity_scaled_lookahead_dist: true
#       min_linear_velocity: 0.001
#       min_approach_linear_velocity: 0.08
#       approach_velocity_scaling_dist: 0.5
#       max_allowed_time_to_collision_up_to_target: 2.0
#       use_collision_detection: true
#       use_cost_regulated_linear_velocity_scaling: true
#       cost_scaling_dist: 0.5
#       cost_scaling_gain: 0.8
#       inflation_cost_scaling_factor: 3.0
#       use_rotate_to_heading: true
#       allow_reversing: false
#       rotate_to_heading_min_angle: 0.5
#       max_angular_accel: 3.0
#       max_linear_accel: 2.0
#       max_lateral_accel: 0.2
#       max_robot_pose_search_dist: 10.0
#       use_interpolation: true
#       use_heading_from_path: true
#       approach_velocity_scaling_dist: 1.0
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      #plugin: "mppi::MPPIController"
      time_steps: 56
      model_dt: 0.05
      batch_size: 2000
      vx_std: 0.2
      vy_std: 0.2
      wz_std: 0.5  # 기존 0.4 → 증가 (회전 반응 향상)
      vx_max: 0.6
      vx_min: -0.35
      vy_max: 0.5
      wz_max: 2.5  # 기존 2.2 → 증가 (더 유연한 방향 전환)
      iteration_count: 1
      prune_distance: 2.0
      transform_tolerance: 0.1
      temperature: 0.4
      gamma: 0.02
      motion_model: "DiffDrive"
      visualize: false
      allow_reversing: true  # 후진 허용 (갇혔을 때 탈출 가능)
      use_rotate_to_heading: true
      rotate_to_heading_min_angle: 0.3
      rotate_to_heading_angular_vel: 0.5

      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3

      AckermannConstrains:
        min_turning_r: 0.35  # 기존 0.3 → 증가 (더 부드러운 회전)

      critics: ["ConstraintCritic", "ObstaclesCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]

      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0

      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 1.2

      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.4

      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0  # 기존 6.0 → 감소 (후진 가능성 높임)
        threshold_to_consider: 0.6

      ObstaclesCritic:
        enabled: true
        cost_power: 1
        repulsion_weight: 2.5  # 기존 2.0 → 증가 (더 강력한 장애물 회피)
        critical_weight: 15.0
        consider_footprint: false
        collision_cost: 10000.0
        collision_margin_distance: 0.2  # 기존 0.15 → 증가 (충돌 방지 거리 확대)
        near_goal_distance: 0.6

      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0  # 기존 2.0 → 증가 (경로 정렬 강화)
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 3
        threshold_to_consider: 0.6
        offset_from_furthest: 20
        use_path_orientations: true

      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 7.0  # 기존 6.0 → 증가 (경로 추종 강화)
        offset_from_furthest: 5
        threshold_to_consider: 1.4

      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.5
        offset_from_furthest: 4
        threshold_to_consider: 0.6
        max_angle_to_furthest: 1.5  # 기존 1.2 → 증가 (더 큰 각도에서 경로 수정 가능)
        forward_preference: true

      Recovery:
        enabled: true
        behavior: ["BackUp", "Spin"]
        backup_distance: 0.4  # 기존 0.3 → 증가 (후진 거리 확장)
        backup_speed: -0.1
        spin_distance: 1.57


      # TwirlingCritic:
      #   enabled: true
      #   twirling_cost_power: 1
      #   twirling_cost_weight: 10.0
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 5.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: true
      width: 2
      height: 2
      resolution: 0.05
      # robot_radius: 0.325
      footprint: '[[0.05, 0.12], [0.05, -0.12], [-0.14, -0.12], [-0.14, 0.12]]'
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.3
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
          obstacle_max_range: 0.5
          obstacle_min_range: 0.1
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_footprint
      use_sim_time: True
      robot_radius: 0.15
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 0.5
          obstacle_min_range: 0.1
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.3
      always_send_full_costmap: True


map_server:
  ros__parameters:
    use_sim_time: True
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_smac_planner/SmacPlanner2D"
      tolerance: 0.5                    # tolerance for planning if unable to reach exact pose, in meters, for 2D node
      downsample_costmap: false           # whether or not to downsample the map
      downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: true                # allow traveling in unknown space
      max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000    # maximum number of iterations to attempt to reach goal once in tolerance, 2D only
      max_planning_time: 3.5              # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      cost_travel_multiplier: 2.0         # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1.0e-10

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    global_frame: odom
    robot_base_frame: base_footprint
    transform_tolerance: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "CLOSED_LOOP"
    max_velocity: [1.5, 0.0, 1.8]
    min_velocity: [-1.0, 0.0, -1.8]
    max_accel: [1.8, 0.0, 2.0]
    max_decel: [-1.8, 0.0, -2.0]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0